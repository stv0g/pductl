//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	// Error An optional error message
	Error string `json:"error"`
}

// BreakerStatus defines model for BreakerStatus.
type BreakerStatus struct {
	ID             int     `json:"id"`
	Name           string  `json:"name"`
	PeakRMSCurrent float32 `json:"peak_rms_current"`
	TrueRMSCurrent float32 `json:"true_rms_current"`
}

// GroupStatus defines model for GroupStatus.
type GroupStatus struct {
	// AveragePower Average power [W]
	AveragePower float32 `json:"avg_power"`
	BreakerID    int     `json:"breaker_id"`
	ID           int     `json:"id"`
	Name         string  `json:"name"`

	// PeakRMSCurrent Peak RMS current [A]
	PeakRMSCurrent float32 `json:"peak_rms_current"`

	// TrueRMSCurrent True RMS current [A]
	TrueRMSCurrent float32 `json:"true_rms_current"`

	// TrueRMSVoltage True RMS voltage [V]
	TrueRMSVoltage float32 `json:"true_rms_voltage"`

	// VoltAmps Volt Amperes [VA]
	VoltAmps float32 `json:"va"`
}

// Measurements defines model for Measurements.
type Measurements struct {
	// AveragePower Average power [W]
	AveragePower float32 `json:"avg_power"`

	// PeakRMSCurrent Peak RMS current [A]
	PeakRMSCurrent float32 `json:"peak_rms_current"`

	// TrueRMSCurrent True RMS current [A]
	TrueRMSCurrent float32 `json:"true_rms_current"`

	// TrueRMSVoltage True RMS voltage [V]
	TrueRMSVoltage float32 `json:"true_rms_voltage"`

	// VoltAmps Volt Amperes [VA]
	VoltAmps float32 `json:"va"`
}

// OutletStatus defines model for OutletStatus.
type OutletStatus struct {
	// AveragePower Average power [W]
	AveragePower float32 `json:"avg_power"`
	BreakerID    int     `json:"breaker_id"`
	GroupID      int     `json:"group_id"`
	ID           int     `json:"id"`
	Locked       bool    `json:"locked"`
	Name         string  `json:"name"`

	// PeakRMSCurrent Peak RMS current [A]
	PeakRMSCurrent float32 `json:"peak_rms_current"`
	State          bool    `json:"state"`

	// TrueRMSCurrent True RMS current [A]
	TrueRMSCurrent float32 `json:"true_rms_current"`

	// TrueRMSVoltage True RMS voltage [V]
	TrueRMSVoltage float32 `json:"true_rms_voltage"`

	// VoltAmps Volt Amperes [VA]
	VoltAmps float32 `json:"va"`
}

// Status defines model for Status.
type Status struct {
	Breakers []BreakerStatus `json:"breakers"`
	Groups   []GroupStatus   `json:"groups"`
	Outlets  []OutletStatus  `json:"outlets"`
	Switches []bool          `json:"switches"`

	// Temp Temperature [C]
	Temp float32 `json:"temp"`

	// TotalKwh Total energy [kWh]
	TotalKwh float32 `json:"total_kwh"`
}

// Id defines model for id.
type Id = string

// BadRequest defines model for BadRequest.
type BadRequest = ApiResponse

// Forbidden defines model for Forbidden.
type Forbidden = ApiResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ApiResponse

// NotFound defines model for NotFound.
type NotFound = ApiResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ApiResponse

// LockOutletJSONBody defines parameters for LockOutlet.
type LockOutletJSONBody = bool

// SwitchOutletJSONBody defines parameters for SwitchOutlet.
type SwitchOutletJSONBody = bool

// LockOutletJSONRequestBody defines body for LockOutlet for application/json ContentType.
type LockOutletJSONRequestBody = LockOutletJSONBody

// SwitchOutletJSONRequestBody defines body for SwitchOutlet for application/json ContentType.
type SwitchOutletJSONRequestBody = SwitchOutletJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ClearMaximumCurrents request
	ClearMaximumCurrents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LockOutletWithBody request with any body
	LockOutletWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LockOutlet(ctx context.Context, id Id, body LockOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebootOutlet request
	RebootOutlet(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SwitchOutletWithBody request with any body
	SwitchOutletWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SwitchOutlet(ctx context.Context, id Id, body SwitchOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatusOutlet request
	StatusOutlet(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Status request
	Status(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StatusOutletAll request
	StatusOutletAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Temperature request
	Temperature(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WhoAmI request
	WhoAmI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ClearMaximumCurrents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClearMaximumCurrentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockOutletWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockOutletRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockOutlet(ctx context.Context, id Id, body LockOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockOutletRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebootOutlet(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebootOutletRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwitchOutletWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwitchOutletRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwitchOutlet(ctx context.Context, id Id, body SwitchOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwitchOutletRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatusOutlet(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatusOutletRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Status(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StatusOutletAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStatusOutletAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Temperature(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemperatureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WhoAmI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWhoAmIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewClearMaximumCurrentsRequest generates requests for ClearMaximumCurrents
func NewClearMaximumCurrentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLockOutletRequest calls the generic LockOutlet builder with application/json body
func NewLockOutletRequest(server string, id Id, body LockOutletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLockOutletRequestWithBody(server, id, "application/json", bodyReader)
}

// NewLockOutletRequestWithBody generates requests for LockOutlet with any type of body
func NewLockOutletRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outlet/%s/lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRebootOutletRequest generates requests for RebootOutlet
func NewRebootOutletRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outlet/%s/reboot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwitchOutletRequest calls the generic SwitchOutlet builder with application/json body
func NewSwitchOutletRequest(server string, id Id, body SwitchOutletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSwitchOutletRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSwitchOutletRequestWithBody generates requests for SwitchOutlet with any type of body
func NewSwitchOutletRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outlet/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStatusOutletRequest generates requests for StatusOutlet
func NewStatusOutletRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/outlet/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatusRequest generates requests for Status
func NewStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStatusOutletAllRequest generates requests for StatusOutletAll
func NewStatusOutletAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/outlets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTemperatureRequest generates requests for Temperature
func NewTemperatureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/temperature")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWhoAmIRequest generates requests for WhoAmI
func NewWhoAmIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whoami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ClearMaximumCurrentsWithResponse request
	ClearMaximumCurrentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ClearMaximumCurrentsResponse, error)

	// LockOutletWithBodyWithResponse request with any body
	LockOutletWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LockOutletResponse, error)

	LockOutletWithResponse(ctx context.Context, id Id, body LockOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*LockOutletResponse, error)

	// RebootOutletWithResponse request
	RebootOutletWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*RebootOutletResponse, error)

	// SwitchOutletWithBodyWithResponse request with any body
	SwitchOutletWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwitchOutletResponse, error)

	SwitchOutletWithResponse(ctx context.Context, id Id, body SwitchOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*SwitchOutletResponse, error)

	// StatusOutletWithResponse request
	StatusOutletWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*StatusOutletResponse, error)

	// StatusWithResponse request
	StatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusResponse, error)

	// StatusOutletAllWithResponse request
	StatusOutletAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusOutletAllResponse, error)

	// TemperatureWithResponse request
	TemperatureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TemperatureResponse, error)

	// WhoAmIWithResponse request
	WhoAmIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoAmIResponse, error)
}

type ClearMaximumCurrentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ClearMaximumCurrentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClearMaximumCurrentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockOutletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r LockOutletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockOutletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebootOutletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RebootOutletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebootOutletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwitchOutletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r SwitchOutletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwitchOutletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatusOutletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutletStatus
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StatusOutletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatusOutletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StatusOutletAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OutletStatus
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StatusOutletAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StatusOutletAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TemperatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Temperature Temperature [C]
		Temperature float32 `json:"temperature"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r TemperatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TemperatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WhoAmIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Username The username of the current user
		Username string `json:"username"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r WhoAmIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WhoAmIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ClearMaximumCurrentsWithResponse request returning *ClearMaximumCurrentsResponse
func (c *ClientWithResponses) ClearMaximumCurrentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ClearMaximumCurrentsResponse, error) {
	rsp, err := c.ClearMaximumCurrents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClearMaximumCurrentsResponse(rsp)
}

// LockOutletWithBodyWithResponse request with arbitrary body returning *LockOutletResponse
func (c *ClientWithResponses) LockOutletWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LockOutletResponse, error) {
	rsp, err := c.LockOutletWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockOutletResponse(rsp)
}

func (c *ClientWithResponses) LockOutletWithResponse(ctx context.Context, id Id, body LockOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*LockOutletResponse, error) {
	rsp, err := c.LockOutlet(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockOutletResponse(rsp)
}

// RebootOutletWithResponse request returning *RebootOutletResponse
func (c *ClientWithResponses) RebootOutletWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*RebootOutletResponse, error) {
	rsp, err := c.RebootOutlet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebootOutletResponse(rsp)
}

// SwitchOutletWithBodyWithResponse request with arbitrary body returning *SwitchOutletResponse
func (c *ClientWithResponses) SwitchOutletWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SwitchOutletResponse, error) {
	rsp, err := c.SwitchOutletWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwitchOutletResponse(rsp)
}

func (c *ClientWithResponses) SwitchOutletWithResponse(ctx context.Context, id Id, body SwitchOutletJSONRequestBody, reqEditors ...RequestEditorFn) (*SwitchOutletResponse, error) {
	rsp, err := c.SwitchOutlet(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwitchOutletResponse(rsp)
}

// StatusOutletWithResponse request returning *StatusOutletResponse
func (c *ClientWithResponses) StatusOutletWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*StatusOutletResponse, error) {
	rsp, err := c.StatusOutlet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatusOutletResponse(rsp)
}

// StatusWithResponse request returning *StatusResponse
func (c *ClientWithResponses) StatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusResponse, error) {
	rsp, err := c.Status(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatusResponse(rsp)
}

// StatusOutletAllWithResponse request returning *StatusOutletAllResponse
func (c *ClientWithResponses) StatusOutletAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StatusOutletAllResponse, error) {
	rsp, err := c.StatusOutletAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStatusOutletAllResponse(rsp)
}

// TemperatureWithResponse request returning *TemperatureResponse
func (c *ClientWithResponses) TemperatureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TemperatureResponse, error) {
	rsp, err := c.Temperature(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemperatureResponse(rsp)
}

// WhoAmIWithResponse request returning *WhoAmIResponse
func (c *ClientWithResponses) WhoAmIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WhoAmIResponse, error) {
	rsp, err := c.WhoAmI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWhoAmIResponse(rsp)
}

// ParseClearMaximumCurrentsResponse parses an HTTP response from a ClearMaximumCurrentsWithResponse call
func ParseClearMaximumCurrentsResponse(rsp *http.Response) (*ClearMaximumCurrentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClearMaximumCurrentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLockOutletResponse parses an HTTP response from a LockOutletWithResponse call
func ParseLockOutletResponse(rsp *http.Response) (*LockOutletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LockOutletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRebootOutletResponse parses an HTTP response from a RebootOutletWithResponse call
func ParseRebootOutletResponse(rsp *http.Response) (*RebootOutletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RebootOutletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSwitchOutletResponse parses an HTTP response from a SwitchOutletWithResponse call
func ParseSwitchOutletResponse(rsp *http.Response) (*SwitchOutletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwitchOutletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStatusOutletResponse parses an HTTP response from a StatusOutletWithResponse call
func ParseStatusOutletResponse(rsp *http.Response) (*StatusOutletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatusOutletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutletStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStatusResponse parses an HTTP response from a StatusWithResponse call
func ParseStatusResponse(rsp *http.Response) (*StatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStatusOutletAllResponse parses an HTTP response from a StatusOutletAllWithResponse call
func ParseStatusOutletAllResponse(rsp *http.Response) (*StatusOutletAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StatusOutletAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OutletStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTemperatureResponse parses an HTTP response from a TemperatureWithResponse call
func ParseTemperatureResponse(rsp *http.Response) (*TemperatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TemperatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Temperature Temperature [C]
			Temperature float32 `json:"temperature"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseWhoAmIResponse parses an HTTP response from a WhoAmIWithResponse call
func ParseWhoAmIResponse(rsp *http.Response) (*WhoAmIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WhoAmIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Username The username of the current user
			Username string `json:"username"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Clear peak RMS current
	// (POST /clear)
	ClearMaximumCurrents(w http.ResponseWriter, r *http.Request)
	// Switch lock state of outlet
	// (POST /outlet/{id}/lock)
	LockOutlet(w http.ResponseWriter, r *http.Request, id Id)
	// Reboot the outlet
	// (POST /outlet/{id}/reboot)
	RebootOutlet(w http.ResponseWriter, r *http.Request, id Id)
	// Switch state of outlet
	// (POST /outlet/{id}/state)
	SwitchOutlet(w http.ResponseWriter, r *http.Request, id Id)
	// Switch state of outlet
	// (GET /outlet/{id}/status)
	StatusOutlet(w http.ResponseWriter, r *http.Request, id Id)
	// Get status of PDU
	// (GET /status)
	Status(w http.ResponseWriter, r *http.Request)
	// Get status of PDU outlets
	// (GET /status/outlets)
	StatusOutletAll(w http.ResponseWriter, r *http.Request)
	// Get temperature of PDU
	// (GET /temperature)
	Temperature(w http.ResponseWriter, r *http.Request)
	// Get name of current user
	// (GET /whoami)
	WhoAmI(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ClearMaximumCurrents operation middleware
func (siw *ServerInterfaceWrapper) ClearMaximumCurrents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearMaximumCurrents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LockOutlet operation middleware
func (siw *ServerInterfaceWrapper) LockOutlet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LockOutlet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RebootOutlet operation middleware
func (siw *ServerInterfaceWrapper) RebootOutlet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RebootOutlet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SwitchOutlet operation middleware
func (siw *ServerInterfaceWrapper) SwitchOutlet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SwitchOutlet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatusOutlet operation middleware
func (siw *ServerInterfaceWrapper) StatusOutlet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatusOutlet(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Status operation middleware
func (siw *ServerInterfaceWrapper) Status(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Status(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StatusOutletAll operation middleware
func (siw *ServerInterfaceWrapper) StatusOutletAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StatusOutletAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Temperature operation middleware
func (siw *ServerInterfaceWrapper) Temperature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Temperature(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// WhoAmI operation middleware
func (siw *ServerInterfaceWrapper) WhoAmI(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WhoAmI(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/clear", wrapper.ClearMaximumCurrents)
	m.HandleFunc("POST "+options.BaseURL+"/outlet/{id}/lock", wrapper.LockOutlet)
	m.HandleFunc("POST "+options.BaseURL+"/outlet/{id}/reboot", wrapper.RebootOutlet)
	m.HandleFunc("POST "+options.BaseURL+"/outlet/{id}/state", wrapper.SwitchOutlet)
	m.HandleFunc("GET "+options.BaseURL+"/outlet/{id}/status", wrapper.StatusOutlet)
	m.HandleFunc("GET "+options.BaseURL+"/status", wrapper.Status)
	m.HandleFunc("GET "+options.BaseURL+"/status/outlets", wrapper.StatusOutletAll)
	m.HandleFunc("GET "+options.BaseURL+"/temperature", wrapper.Temperature)
	m.HandleFunc("GET "+options.BaseURL+"/whoami", wrapper.WhoAmI)

	return m
}

type BadRequestJSONResponse ApiResponse

type ForbiddenJSONResponse ApiResponse

type InternalServerErrorJSONResponse ApiResponse

type NotFoundJSONResponse ApiResponse

type SuccessResponse struct {
}

type UnauthorizedJSONResponse ApiResponse

type ClearMaximumCurrentsRequestObject struct {
}

type ClearMaximumCurrentsResponseObject interface {
	VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error
}

type ClearMaximumCurrents200Response = SuccessResponse

func (response ClearMaximumCurrents200Response) VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearMaximumCurrents400JSONResponse struct{ BadRequestJSONResponse }

func (response ClearMaximumCurrents400JSONResponse) VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ClearMaximumCurrents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearMaximumCurrents401JSONResponse) VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearMaximumCurrents403JSONResponse struct{ ForbiddenJSONResponse }

func (response ClearMaximumCurrents403JSONResponse) VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ClearMaximumCurrents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearMaximumCurrents500JSONResponse) VisitClearMaximumCurrentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LockOutletRequestObject struct {
	Id   Id `json:"id"`
	Body *LockOutletJSONRequestBody
}

type LockOutletResponseObject interface {
	VisitLockOutletResponse(w http.ResponseWriter) error
}

type LockOutlet200Response = SuccessResponse

func (response LockOutlet200Response) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LockOutlet400JSONResponse struct{ BadRequestJSONResponse }

func (response LockOutlet400JSONResponse) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LockOutlet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response LockOutlet401JSONResponse) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LockOutlet403JSONResponse struct{ ForbiddenJSONResponse }

func (response LockOutlet403JSONResponse) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type LockOutlet404JSONResponse struct{ NotFoundJSONResponse }

func (response LockOutlet404JSONResponse) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LockOutlet500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response LockOutlet500JSONResponse) VisitLockOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RebootOutletRequestObject struct {
	Id Id `json:"id"`
}

type RebootOutletResponseObject interface {
	VisitRebootOutletResponse(w http.ResponseWriter) error
}

type RebootOutlet200Response = SuccessResponse

func (response RebootOutlet200Response) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RebootOutlet400JSONResponse struct{ BadRequestJSONResponse }

func (response RebootOutlet400JSONResponse) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RebootOutlet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response RebootOutlet401JSONResponse) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RebootOutlet403JSONResponse struct{ ForbiddenJSONResponse }

func (response RebootOutlet403JSONResponse) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RebootOutlet404JSONResponse struct{ NotFoundJSONResponse }

func (response RebootOutlet404JSONResponse) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RebootOutlet500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response RebootOutlet500JSONResponse) VisitRebootOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SwitchOutletRequestObject struct {
	Id   Id `json:"id"`
	Body *SwitchOutletJSONRequestBody
}

type SwitchOutletResponseObject interface {
	VisitSwitchOutletResponse(w http.ResponseWriter) error
}

type SwitchOutlet200Response = SuccessResponse

func (response SwitchOutlet200Response) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SwitchOutlet400JSONResponse struct{ BadRequestJSONResponse }

func (response SwitchOutlet400JSONResponse) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SwitchOutlet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response SwitchOutlet401JSONResponse) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SwitchOutlet403JSONResponse struct{ ForbiddenJSONResponse }

func (response SwitchOutlet403JSONResponse) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type SwitchOutlet404JSONResponse struct{ NotFoundJSONResponse }

func (response SwitchOutlet404JSONResponse) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SwitchOutlet500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response SwitchOutlet500JSONResponse) VisitSwitchOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutletRequestObject struct {
	Id Id `json:"id"`
}

type StatusOutletResponseObject interface {
	VisitStatusOutletResponse(w http.ResponseWriter) error
}

type StatusOutlet200JSONResponse OutletStatus

func (response StatusOutlet200JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutlet400JSONResponse struct{ BadRequestJSONResponse }

func (response StatusOutlet400JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutlet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response StatusOutlet401JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutlet403JSONResponse struct{ ForbiddenJSONResponse }

func (response StatusOutlet403JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutlet404JSONResponse struct{ NotFoundJSONResponse }

func (response StatusOutlet404JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutlet500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response StatusOutlet500JSONResponse) VisitStatusOutletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StatusRequestObject struct {
}

type StatusResponseObject interface {
	VisitStatusResponse(w http.ResponseWriter) error
}

type Status200JSONResponse Status

func (response Status200JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Status401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Status401JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Status403JSONResponse struct{ ForbiddenJSONResponse }

func (response Status403JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Status500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Status500JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutletAllRequestObject struct {
}

type StatusOutletAllResponseObject interface {
	VisitStatusOutletAllResponse(w http.ResponseWriter) error
}

type StatusOutletAll200JSONResponse []OutletStatus

func (response StatusOutletAll200JSONResponse) VisitStatusOutletAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutletAll401JSONResponse struct{ UnauthorizedJSONResponse }

func (response StatusOutletAll401JSONResponse) VisitStatusOutletAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutletAll403JSONResponse struct{ ForbiddenJSONResponse }

func (response StatusOutletAll403JSONResponse) VisitStatusOutletAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StatusOutletAll500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response StatusOutletAll500JSONResponse) VisitStatusOutletAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TemperatureRequestObject struct {
}

type TemperatureResponseObject interface {
	VisitTemperatureResponse(w http.ResponseWriter) error
}

type Temperature200JSONResponse struct {
	// Temperature Temperature [C]
	Temperature float32 `json:"temperature"`
}

func (response Temperature200JSONResponse) VisitTemperatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Temperature401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Temperature401JSONResponse) VisitTemperatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Temperature403JSONResponse struct{ ForbiddenJSONResponse }

func (response Temperature403JSONResponse) VisitTemperatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Temperature500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Temperature500JSONResponse) VisitTemperatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmIRequestObject struct {
}

type WhoAmIResponseObject interface {
	VisitWhoAmIResponse(w http.ResponseWriter) error
}

type WhoAmI200JSONResponse struct {
	// Username The username of the current user
	Username string `json:"username"`
}

func (response WhoAmI200JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmI401JSONResponse struct{ UnauthorizedJSONResponse }

func (response WhoAmI401JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmI403JSONResponse struct{ ForbiddenJSONResponse }

func (response WhoAmI403JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type WhoAmI500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response WhoAmI500JSONResponse) VisitWhoAmIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Clear peak RMS current
	// (POST /clear)
	ClearMaximumCurrents(ctx context.Context, request ClearMaximumCurrentsRequestObject) (ClearMaximumCurrentsResponseObject, error)
	// Switch lock state of outlet
	// (POST /outlet/{id}/lock)
	LockOutlet(ctx context.Context, request LockOutletRequestObject) (LockOutletResponseObject, error)
	// Reboot the outlet
	// (POST /outlet/{id}/reboot)
	RebootOutlet(ctx context.Context, request RebootOutletRequestObject) (RebootOutletResponseObject, error)
	// Switch state of outlet
	// (POST /outlet/{id}/state)
	SwitchOutlet(ctx context.Context, request SwitchOutletRequestObject) (SwitchOutletResponseObject, error)
	// Switch state of outlet
	// (GET /outlet/{id}/status)
	StatusOutlet(ctx context.Context, request StatusOutletRequestObject) (StatusOutletResponseObject, error)
	// Get status of PDU
	// (GET /status)
	Status(ctx context.Context, request StatusRequestObject) (StatusResponseObject, error)
	// Get status of PDU outlets
	// (GET /status/outlets)
	StatusOutletAll(ctx context.Context, request StatusOutletAllRequestObject) (StatusOutletAllResponseObject, error)
	// Get temperature of PDU
	// (GET /temperature)
	Temperature(ctx context.Context, request TemperatureRequestObject) (TemperatureResponseObject, error)
	// Get name of current user
	// (GET /whoami)
	WhoAmI(ctx context.Context, request WhoAmIRequestObject) (WhoAmIResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ClearMaximumCurrents operation middleware
func (sh *strictHandler) ClearMaximumCurrents(w http.ResponseWriter, r *http.Request) {
	var request ClearMaximumCurrentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearMaximumCurrents(ctx, request.(ClearMaximumCurrentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearMaximumCurrents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearMaximumCurrentsResponseObject); ok {
		if err := validResponse.VisitClearMaximumCurrentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LockOutlet operation middleware
func (sh *strictHandler) LockOutlet(w http.ResponseWriter, r *http.Request, id Id) {
	var request LockOutletRequestObject

	request.Id = id

	var body LockOutletJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LockOutlet(ctx, request.(LockOutletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LockOutlet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LockOutletResponseObject); ok {
		if err := validResponse.VisitLockOutletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RebootOutlet operation middleware
func (sh *strictHandler) RebootOutlet(w http.ResponseWriter, r *http.Request, id Id) {
	var request RebootOutletRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RebootOutlet(ctx, request.(RebootOutletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RebootOutlet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RebootOutletResponseObject); ok {
		if err := validResponse.VisitRebootOutletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SwitchOutlet operation middleware
func (sh *strictHandler) SwitchOutlet(w http.ResponseWriter, r *http.Request, id Id) {
	var request SwitchOutletRequestObject

	request.Id = id

	var body SwitchOutletJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SwitchOutlet(ctx, request.(SwitchOutletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SwitchOutlet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SwitchOutletResponseObject); ok {
		if err := validResponse.VisitSwitchOutletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StatusOutlet operation middleware
func (sh *strictHandler) StatusOutlet(w http.ResponseWriter, r *http.Request, id Id) {
	var request StatusOutletRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StatusOutlet(ctx, request.(StatusOutletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusOutlet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusOutletResponseObject); ok {
		if err := validResponse.VisitStatusOutletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Status operation middleware
func (sh *strictHandler) Status(w http.ResponseWriter, r *http.Request) {
	var request StatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Status(ctx, request.(StatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Status")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusResponseObject); ok {
		if err := validResponse.VisitStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StatusOutletAll operation middleware
func (sh *strictHandler) StatusOutletAll(w http.ResponseWriter, r *http.Request) {
	var request StatusOutletAllRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StatusOutletAll(ctx, request.(StatusOutletAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusOutletAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusOutletAllResponseObject); ok {
		if err := validResponse.VisitStatusOutletAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Temperature operation middleware
func (sh *strictHandler) Temperature(w http.ResponseWriter, r *http.Request) {
	var request TemperatureRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Temperature(ctx, request.(TemperatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Temperature")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TemperatureResponseObject); ok {
		if err := validResponse.VisitTemperatureResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WhoAmI operation middleware
func (sh *strictHandler) WhoAmI(w http.ResponseWriter, r *http.Request) {
	var request WhoAmIRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WhoAmI(ctx, request.(WhoAmIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WhoAmI")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WhoAmIResponseObject); ok {
		if err := validResponse.VisitWhoAmIResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
